/*
SCSS variables are information about icon's compiled state, stored under its original file name

.icon-home {
  width: map-get($icon-home, 'width');
}

At the bottom of this section, we provide information about the spritesheet itself
*/
$s-close: (
  name: 's-close',
  x: 30px,
  y: 109px,
  offset-x: -30px,
  offset-y: -109px,
  width: 12px,
  height: 12px,
  total-width: 193px,
  total-height: 138px,
  image: '../img/sprite/png-sprite.png'
);
$s-conference: (
  name: 's-conference',
  x: 98px,
  y: 55px,
  offset-x: -98px,
  offset-y: -55px,
  width: 48px,
  height: 53px,
  total-width: 193px,
  total-height: 138px,
  image: '../img/sprite/png-sprite.png'
);
$s-coworking: (
  name: 's-coworking',
  x: 98px,
  y: 0px,
  offset-x: -98px,
  offset-y: 0px,
  width: 48px,
  height: 53px,
  total-width: 193px,
  total-height: 138px,
  image: '../img/sprite/png-sprite.png'
);
$s-icon-all-info: (
  name: 's-icon-all-info',
  x: 177px,
  y: 63px,
  offset-x: -177px,
  offset-y: -63px,
  width: 16px,
  height: 11px,
  total-width: 193px,
  total-height: 138px,
  image: '../img/sprite/png-sprite.png'
);
$s-icon-all-info-hover: (
  name: 's-icon-all-info_hover',
  x: 177px,
  y: 51px,
  offset-x: -177px,
  offset-y: -51px,
  width: 16px,
  height: 11px,
  total-width: 193px,
  total-height: 138px,
  image: '../img/sprite/png-sprite.png'
);
$s-icon-bq-left: (
  name: 's-icon-bq-left',
  x: 171px,
  y: 82px,
  offset-x: -171px,
  offset-y: -82px,
  width: 22px,
  height: 19px,
  total-width: 193px,
  total-height: 138px,
  image: '../img/sprite/png-sprite.png'
);
$s-icon-bq-right: (
  name: 's-icon-bq-right',
  x: 147px,
  y: 82px,
  offset-x: -147px,
  offset-y: -82px,
  width: 23px,
  height: 19px,
  total-width: 193px,
  total-height: 138px,
  image: '../img/sprite/png-sprite.png'
);
$s-icon-fb: (
  name: 's-icon-fb',
  x: 0px,
  y: 109px,
  offset-x: 0px,
  offset-y: -109px,
  width: 29px,
  height: 29px,
  total-width: 193px,
  total-height: 138px,
  image: '../img/sprite/png-sprite.png'
);
$s-icon-vk: (
  name: 's-icon-vk',
  x: 147px,
  y: 51px,
  offset-x: -147px,
  offset-y: -51px,
  width: 29px,
  height: 30px,
  total-width: 193px,
  total-height: 138px,
  image: '../img/sprite/png-sprite.png'
);
$s-kitchen: (
  name: 's-kitchen',
  x: 49px,
  y: 0px,
  offset-x: -49px,
  offset-y: 0px,
  width: 48px,
  height: 54px,
  total-width: 193px,
  total-height: 138px,
  image: '../img/sprite/png-sprite.png'
);
$s-logo-min: (
  name: 's-logo-min',
  x: 147px,
  y: 0px,
  offset-x: -147px,
  offset-y: 0px,
  width: 46px,
  height: 50px,
  total-width: 193px,
  total-height: 138px,
  image: '../img/sprite/png-sprite.png'
);
$s-negotiations: (
  name: 's-negotiations',
  x: 49px,
  y: 55px,
  offset-x: -49px,
  offset-y: -55px,
  width: 48px,
  height: 53px,
  total-width: 193px,
  total-height: 138px,
  image: '../img/sprite/png-sprite.png'
);
$s-offices: (
  name: 's-offices',
  x: 0px,
  y: 55px,
  offset-x: 0px,
  offset-y: -55px,
  width: 48px,
  height: 53px,
  total-width: 193px,
  total-height: 138px,
  image: '../img/sprite/png-sprite.png'
);
$s-recreation: (
  name: 's-recreation',
  x: 0px,
  y: 0px,
  offset-x: 0px,
  offset-y: 0px,
  width: 48px,
  height: 54px,
  total-width: 193px,
  total-height: 138px,
  image: '../img/sprite/png-sprite.png'
);
$spritesheet: (
  width: 193px,
  height: 138px,
  image: '../img/sprite/png-sprite.png',
  sprites: ($s-close, $s-conference, $s-coworking, $s-icon-all-info, $s-icon-all-info-hover, $s-icon-bq-left, $s-icon-bq-right, $s-icon-fb, $s-icon-vk, $s-kitchen, $s-logo-min, $s-negotiations, $s-offices, $s-recreation, )
);

/*
The provided mixins are intended to be used with variables directly

.icon-home {
  @include sprite-width($icon-home);
}

.icon-email {
  @include sprite($icon-email);
}

Example usage in HTML:

`display: block` sprite:
<div class="icon-home"></div>

To change `display` (e.g. `display: inline-block;`), we suggest using a common CSS class:

// CSS
.icon {
  display: inline-block;
}

// HTML
<i class="icon icon-home"></i>
*/
@mixin sprite-width($sprite) {
  width: map-get($sprite, 'width');
}

@mixin sprite-height($sprite) {
  height: map-get($sprite, 'height');
}

@mixin sprite-position($sprite) {
  background-position: map-get($sprite, 'offset-x') map-get($sprite, 'offset-y');
}

@mixin sprite-image($sprite) {
  background-image: url(map-get($sprite, 'image'));
}

@mixin sprite($sprite) {
  @include sprite-image($sprite);
  @include sprite-position($sprite);
  @include sprite-width($sprite);
  @include sprite-height($sprite);
}

/*
The `sprites` mixin generates identical output to the CSS template
  but can be overridden inside of SCSS

@include sprites(map-get($spritesheet, 'sprites'));
*/
@mixin sprites($sprites) {
  @each $sprite in $sprites {
    $sprite-name: map-get($sprite, 'name');
    .#{$sprite-name} {
      @include sprite($sprite);
    }
  }
}
